#CODE
// Code your design here
module ALU (
    input  [3:0] A,
    input  [3:0] B,
    input  [2:0] SEL,
    output reg [3:0] RESULT,
    output reg CARRY,
    output ZERO
);

    always @(*) begin
        CARRY = 0;
        case (SEL)
            3'b000: {CARRY, RESULT} = A + B;
            3'b001: {CARRY, RESULT} = A - B;
            3'b010: RESULT = A & B;
            3'b011: RESULT = A | B;
            3'b100: RESULT = ~A;
            default: RESULT = 4'b0000;
        endcase
    end

    assign ZERO = (RESULT == 4'b0000) ? 1 : 0;

endmodule


#TESTBENCH
// Code your testbench here
// or browse Examples
module test_ALU;

    reg [3:0] A, B;
    reg [2:0] SEL;
    wire [3:0] RESULT;
    wire CARRY, ZERO;

    ALU uut (
        .A(A),
        .B(B),
        .SEL(SEL),
        .RESULT(RESULT),
        .CARRY(CARRY),
        .ZERO(ZERO)
    );

    initial begin
        $dumpfile("dump.vcd");
        $dumpvars(0, test_ALU);

        $display("Time\tSEL\tA\tB\tRESULT\tCARRY\tZERO");
        $monitor("%0t\t%b\t%h\t%h\t%h\t%b\t%b", $time, SEL, A, B, RESULT, CARRY, ZERO);

        A = 4'b0101; B = 4'b0011; SEL = 3'b000; #10;
        A = 4'b0101; B = 4'b0011; SEL = 3'b001; #10;
        A = 4'b1100; B = 4'b1010; SEL = 3'b010; #10;
        A = 4'b1100; B = 4'b1010; SEL = 3'b011; #10;
        A = 4'b1010; B = 4'b0000; SEL = 3'b100; #10;
        A = 4'b0000; B = 4'b0000; SEL = 3'b000; #10;

        $finish;
    end

endmodule
